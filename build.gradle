import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.kotlin_version = '1.0.5'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Kotlin Build Script
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0" // Shadow Build Script
    }
}

// ========================= The basics ========================= //

group = 'io.puharesource.mc'
version = '2.0.7'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'

//Shadow
apply plugin: 'com.github.johnrengelman.shadow'
project.tasks.assemble.dependsOn project.tasks.shadowJar
jar.enabled = false

sourceCompatibility = 1.8
targetCompatibility = 1.8


// Manifest
jar {
    manifest.attributes provider: 'gradle'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Force UTF-8
tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}
// Javadoc
javadoc {
    include '**/io/puharesource/mc/titlemanager/api/v2/**'

    options.links 'http://download.oracle.com/javase/8/docs/api/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task jitpackJavadocJar(type: Jar, dependsOn: javadoc) {
    archiveName 'javadoc.jar'
    from javadoc.destinationDir
    from(compileJava) {
        include 'io/puharesource/mc/titlemanager/api/v2/**'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs

    classifier = 'sources'
}

task apiJar(type: Jar) {
    from(compileJava) {
        include 'io/puharesource/mc/titlemanager/api/v2/**'
    }

    classifier = 'api'
}

// ========================= Resource Filtering ========================= //

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.yml'
        filter(ReplaceTokens, tokens: [VERSION: project.version])
    }
}

// ========================= Clean extension ========================= //
// Removes the folder out/ which is would have otherwise been left in
// the root directory, if it wasn't for this method.

clean.doFirst {
    delete "$rootDir/out/"
}

// ========================= Custom compilation task ========================= //
// Bundles all of the compiled jars into a nice and sane directory. (/out/)

tasks.withType(Jar) {
    destinationDir = file("$rootDir/out/")
}

// ========================= Provided scope ========================= //
// The provided scope, allows the developer to choose which dependencies
// will be shaded into the jar file. Provided tells the compiler that the
// dependency is provided at runtime and should therefor not be compiled
// while compile tells the compiler that it is needed right here and now
// and should therefor be compiled into the jar.

configurations {
    provided
    compile.extendsFrom provided
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    archives apiJar
    archives jitpackJavadocJar
}

jar {
    dependsOn configurations.runtime
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

sourceSets {
    main {
        output.resourcesDir = "build/classes/main"
    }
    test {
        output.resourcesDir = "build/classes/test"
    }
}

// ========================= Repositories ========================= //

repositories {
    mavenCentral()

    maven {
        name 'Spigot'
        url 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }

    maven {
        name 'BungeeCord'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
        name 'Vault'
        url 'http://nexus.hc.to/content/repositories/pub_releases'
    }

    maven {
        name 'ess-repo'
        url 'http://repo.ess3.net/content/groups/essentials'
    }

    maven {
        name 'placeholderapi'
        url 'http://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    flatDir {
        dirs "$rootDir/libs/"
    }
}

// ========================= Dependencies ========================= //

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    compile group: 'io.reactivex', name: 'rxjava', version: '1.2.1'

    provided group: 'org.spigotmc', name: 'spigot-api', version: '1.11-R0.1-SNAPSHOT'

    provided group: 'me.clip', name: 'placeholderapi', version: '2.0.8'
    provided group: 'net.milkbowl.vault', name: 'VaultAPI', version: '1.5'
    provided(group: 'net.ess3', name: 'Essentials', version: 'Pre2.14.1.3') { transitive = false }

    provided name: 'SuperVanish'
    provided name: 'VanishNoPacket'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
    testCompile group: 'com.madgag', name: 'animated-gif-lib', version: '1.2'
}

shadowJar {
    baseName = 'TitleManager'
    classifier = null
    dependencies {
        include(dependency('org.jetbrains.kotlin:.*'))
        include(dependency('io.reactivex:.*'))
    }
    relocate 'rx', 'shaded.rx'
    relocate 'kotlin', 'shaded.kotlin'
    relocate 'org.jetbrains', 'shaded.org.jetbrains'
}