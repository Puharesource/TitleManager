import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

group = 'io.puharesource.mc'
version = '2.1.4'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"

//Shadow
project.tasks.assemble.dependsOn project.tasks.shadowJar
jar.enabled = false

sourceCompatibility = 1.8

// Manifest
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Force UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Javadoc
javadoc {
    include '**/io/puharesource/mc/titlemanager/api/v2/**'

    options.links 'http://download.oracle.com/javase/8/docs/api/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task jitpackJavadocJar(type: Jar, dependsOn: javadoc) {
    archiveName 'javadoc.jar'
    from javadoc.destinationDir
    from(compileJava) {
        include 'io/puharesource/mc/titlemanager/api/v2/**'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs

    classifier = 'sources'
}

task apiJar(type: Jar) {
    from(compileJava) {
        include 'io/puharesource/mc/titlemanager/api/v2/**'
    }

    classifier = 'api'
}

// ========================= Resource Filtering ========================= //

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.yml'
        filter(ReplaceTokens, tokens: [VERSION: project.version])
    }
}

// ========================= Clean extension ========================= //
// Removes the folder out/ which is would have otherwise been left in
// the root directory, if it wasn't for this method.

clean.doFirst {
    delete "$rootDir/out/"
}

// ========================= Custom compilation task ========================= //
// Bundles all of the compiled jars into a nice and sane directory. (/out/)

tasks.withType(ShadowJar) {
    destinationDir = file("$rootDir/out/")
}

tasks.withType(Jar) {
    destinationDir = file("$rootDir/out/")
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    archives apiJar
    archives jitpackJavadocJar
}

// Kotlin stuff
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Caching
configurations.all {
    resolutionStrategy {
        // cache dynamic versions for 10 minutes
        cacheDynamicVersionsFor 10*60, 'seconds'
        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'
    }
}

// ========================= Repositories ========================= //

repositories {
    mavenCentral()
    jcenter()

    maven {
        name 'Spigot'
        url 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }

    maven {
        name 'BungeeCord'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
        name 'Vault'
        url 'http://nexus.hc.to/content/repositories/pub_releases'
    }

    maven {
        name 'ess-repo'
        url 'http://repo.ess3.net/content/groups/essentials'
    }

    maven {
        name 'placeholderapi'
        url 'http://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    maven {
        name 'mvdw-software'
        url 'http://repo.mvdw-software.be/content/groups/public/'
    }

    flatDir {
        dirs "$rootDir/libs/"
    }
}

// ========================= Dependencies ========================= //

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.3.21'
    implementation group: 'io.reactivex', name: 'rxjava', version: '1.2.1'

    implementation group: 'org.spigotmc', name: 'spigot-api', version: '1.11-R0.1-SNAPSHOT'

    implementation group: 'me.clip', name: 'placeholderapi', version: '2.0.8'
    implementation group: 'be.maximvdw', name: 'MVdWPlaceholderAPI', version: '1.0.2-SNAPSHOT'
    implementation group: 'net.milkbowl.vault', name: 'VaultAPI', version: '1.7'
    implementation(group: 'net.ess3', name: 'Essentials', version: 'Pre2.14.1.3') { transitive = false }

    implementation name: 'SuperVanish'
    implementation name: 'VanishNoPacket'

    implementation group: 'org.graalvm', name: 'graal-sdk', version: '1.0.0-rc7'
    implementation group: 'com.oracle.truffle', name: 'truffle-api', version: '1.0.0-rc7'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: '1.3.21'
    testImplementation group: 'com.madgag', name: 'animated-gif-lib', version: '1.2'
}

shadowJar {
    baseName = 'TitleManager'
    classifier = null

    dependencies {
        include(dependency('org.jetbrains.kotlin:.*'))
        include(dependency('io.reactivex:.*'))
    }

    relocate 'rx', 'io.puharesource.mc.titlemanager.shaded.rx'
    relocate 'kotlin', 'io.puharesource.mc.titlemanager.shaded.kotlin'
    relocate 'org.jetbrains', 'io.puharesource.mc.titlemanager.shaded.org.jetbrains'
}